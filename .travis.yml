# NB: don't set `language: haskell` here

# The following enables several GHC versions to be tested; often it's enough to test only against the last release in a major GHC version. Feel free to omit lines listings versions you don't need/want testing for.
env:
 - CABALVER=1.18 GHCVER=7.8.4 COVERAGE=1
 - CABALVER=1.22 GHCVER=7.10.2
# - CABALVER=head GHCVER=head   # see section about GHC HEAD snapshots

# Note: the distinction between `before_install` and `install` is not important.
before_install:
 - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER # see note about happy/alex
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:~/.cabal/bin:$PATH
 - |
   if [ $GHCVER = "head" ] || [ ${GHCVER%.*} = "7.8" ] || [ ${GHCVER%.*} = "7.10" ]; then
     travis_retry sudo apt-get install happy-1.19.4 alex-3.1.3
     export PATH=/opt/alex/3.1.3/bin:/opt/happy/1.19.4/bin:$PATH
   else
     travis_retry sudo apt-get install happy alex
   fi

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update
 - cabal install --only-dependencies --enable-tests --enable-benchmarks
# - |
#   if [ "$COVERAGE" = "1" ]; then
#     git clone https://github.com/msakai/hpc-coveralls.git
#     cd hpc-coveralls
#     git checkout travis-pro-spike
#     cabal install --avoid-reinstalls
#     cd ..
#   fi
 - "[ -n \"$COVERAGE\" ] && cabal install hpc-coveralls --avoid-reinstalls || true"

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - cabal configure --enable-tests --enable-benchmarks -v2 $([ "$COVERAGE" = "1" ] && echo "--enable-library-coverage") # -v2 provides useful information for debugging
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cabal test
# - cabal check
 - cabal sdist   # tests that a source-distribution can be generated

# The following scriptlet checks that the resulting source distribution can be built & installed
 - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
   cd dist/;
   if [ -f "$SRC_TGZ" ]; then
      cabal install --force-reinstalls "$SRC_TGZ";
   else
      echo "expected '$SRC_TGZ' not found";
      exit 1;
   fi ;
   cd ..

after_script:
 - env
# - "[ -n \"$COVERAGE\" ] && hpc-coveralls --service-name=travis-pro --repo-token=i3F9AOHilhEE0aawubcouOHLp54BYDbFj --exclude-dir=test --display-report --curl-verbose test || true"
 - "[ -n \"$COVERAGE\" ] && hpc-coveralls --repo-token=i3F9AOHilhEE0aawubcouOHLp54BYDbFj --exclude-dir=test --display-report --curl-verbose test || true"

notifications:
  slack:
    secure: dWJWwfku5wgODVI6zvVvevWV6pEYbGw2jFOa1RzaUuQp/GbLRnzvFZTIAe+fN7rT5grJKfpyTkggkfincgiLO5V4Zy+MvHGZ2+mNGX998Zq3UDPG12Z+FkBCig9KmWr+b6Rv/vqMPj7MGpAKHeMIl8ecbUhK5KLGpshgau3KRVKAuC1n8Sb9zIE0CdjQoGCulLrpQCQlOA7su138PvPq2tKsQd4I4piEhvJu7/KASnmG89e3szgh+PWE81akpvuyxmGU6hYkQTW3TocCUyJJzheZXGuSDGc0Z6KYL1k8cBsafYCef+7HJJnqs0UGaCyM0Q0W5R6OWh7Gy9Q0e7tBpGY16cxqmFV0yuv9FbHu8VOremk+KtQv4pVO3ahAtJK8NMbDAlZsllBC7HffbMd0FC1uuXicyQqj/qnlK45r8zjdVN8KOJKoyPbVgbqulVw+4LvkPkZbtazo4qAOWi9IHJX6/tqyoOfSh5Kype9ja86dgUAodDnXQUl0J4o+AwaO1BaNXaM4R11G1Qu6JpedF1qpMf9rj1bJo0n2FkvC8MthL3Oyiq3e+uAuLjRQv32//UKCorC1KeN1McBLdD+XeAlT0KUcwevtREB9FZY+fAjyXwNo3LGkdhDbhPqese3YKoXpxcyNfswARQdg21j4/yrNMq24QTkgNByCPp80iQA=
